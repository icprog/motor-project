###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.2.5449/W32 for ARM      17/Mar/2014  18:09:08 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Quinn\Documents\School\MPG\SVN                  #
#                    Server\src\drivers\sd.c                                  #
#    Command line =  "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\src\drivers\sd.c" -D UNIT_TESTING=1               #
#                    --preprocess=c "C:\Users\Quinn\Documents\School\MPG\SVN  #
#                    Server\project\UnitTests\List\" -lcN                     #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\UnitTests\List\" --diag_suppress Pa050    #
#                    -o "C:\Users\Quinn\Documents\School\MPG\SVN              #
#                    Server\project\UnitTests\Obj\" --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "C:\Users\Quinn\Documents\School\MPG\SVN         #
#                    Server\project\..\src\" -I "C:\Users\Quinn\Documents\Sch #
#                    ool\MPG\SVN Server\project\..\src\lib\embUnit\" -I       #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\app\" -I                           #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\utils\" -I                     #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\structures\src\" -I            #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\structures\unitTests\" -I      #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\file\" -I                      #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\file\hooks\FatFs\" -I          #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\file\disk\" -I                 #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\FatFs\" -I                     #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\bsp\" -I                           #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\config\" -I                        #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\drivers\" -I                       #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\utils\" -I                         #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\drivers\" -On -I "C:\Program       #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\Quinn\Documents\School\MPG\SVN                  #
#                    Server\project\UnitTests\List\sd.lst                     #
#    Object file  =  C:\Users\Quinn\Documents\School\MPG\SVN                  #
#                    Server\project\UnitTests\Obj\sd.o                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Quinn\Documents\School\MPG\SVN Server\src\drivers\sd.c
      1          /*******************************************************************************************
      2          Secure Digital (SD) Card (SDv3/SDv1/SDv2 and SD) SPI Driver
      3          
      4          This is free, public domain software and there is NO WARRANTY.
      5          No restriction on use. You can use, modify and redistribute it for
      6          personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
      7          
      8          Sheldon Patterson
      9          ********************************************************************************************/
     10          
     11          #include "includes.h"
     12          #include "sd.h"
     13          #include "fileFat.h"
     14          #include "gpio.h"
     15          #include "usart.h"
     16          #include "timer.h"
     17          
     18          
     19          /**************************************************************************
     20           *                                  Constants
     21           **************************************************************************/
     22          #define SD_SPI_STARTUP_CLK		(400000)
     23          #define SD_SPI_OP_CLK			(UINT32_MAX)	// SPI driver will ensure min operating clock
     24          #define SD_SPI_WAIT_TIME_MS	(500)
     25          #define SD_READ_TOKEN_MS		(200)
     26          #define SD_INIT_TIMEOUT_MS		(1000)
     27          #define SD_ERASE_TIMEOUT_MS	(30*NUM_MS_PER_SEC)
     28          #define SD_PERIPH_DEV         (USART1)
     29          
     30          #define SD_SPI_SEL()				GpioClear(GPIO_PIN_SD_CS_MCDA3)
     31          #define SD_SPI_DESEL()			GpioSet(GPIO_PIN_SD_CS_MCDA3)
     32          
     33          //lint -esym(750, SD_*CMD*, SD_R?_LEN) -esym(751, SD_*CMD*, SD_R?_LEN)
     34          // SD/SD commands
     35          #define SD_CMD0		(0)			/* GO_IDLE_STATE */
     36          #define SD_CMD1		(1)			/* SEND_OP_COND (SD) */
     37          #define SD_ACMD41	(0x80+41)		/* SEND_OP_COND (SDC) */
     38          #define SD_CMD8		(8)			/* SEND_IF_COND */
     39          #define SD_CMD9		(9)			/* SEND_CSD */
     40          #define SD_CMD10		(10)			/* SEND_CID */
     41          #define SD_CMD12		(12)			/* STOP_TRANSMISSION */
     42          #define SD_ACMD13	(0x80+13)		/* SD_STATUS (SDC) */
     43          #define SD_CMD16		(16)			/* SET_BLOCKLEN */
     44          #define SD_CMD17		(17)			/* READ_SINGLE_BLOCK */
     45          #define SD_CMD18		(18)			/* READ_MULTIPLE_BLOCK */
     46          #define SD_CMD23		(23)			/* SET_BLOCK_COUNT (SD) */
     47          #define SD_ACMD23	(0x80+23)		/* SET_WR_BLK_ERASE_COUNT (SDC) */
     48          #define SD_CMD24		(24)			/* WRITE_BLOCK */
     49          #define SD_CMD25		(25)			/* WRITE_MULTIPLE_BLOCK */
     50          #define SD_CMD32		(32)			/* ERASE_ER_BLK_START */
     51          #define SD_CMD33		(33)			/* ERASE_ER_BLK_END */
     52          #define SD_CMD38		(38)			/* ERASE */
     53          #define SD_CMD55		(55)			/* APP_CMD */
     54          #define SD_CMD58		(58)			/* READ_OCR */
     55          
     56          #define SD_R1_LEN	(1)
     57          #define SD_R2_LEN	(2)
     58          #define SD_R3_LEN	(SD_R1_LEN + 4)	// 4-byte OCR
     59          #define SD_R7_LEN	(SD_R1_LEN + 4)
     60          
     61          /* Card type flags (CardType) */
     62          #define SD_CT_MMC		0x01		/* SD ver 3 */
     63          #define SD_CT_SD1		0x02		/* SD ver 1 */
     64          #define SD_CT_SD2		0x04		/* SD ver 2 */
     65          #define SD_CT_SDC		(SD_CT_SD1 | SD_CT_SD2)	/* SD */
     66          #define SD_CT_BLOCK		0x08		/* Block addressing */
     67          
     68          #define SD_DUMMY8    0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
     69          #define SD_DUMMY32   SD_DUMMY8 SD_DUMMY8 SD_DUMMY8 SD_DUMMY8
     70          static const u32 SdDummy512[512/4] = {SD_DUMMY32 SD_DUMMY32 SD_DUMMY32 SD_DUMMY32};
     71          
     72          
     73          
     74          /**************************************************************************
     75           *                                  Types
     76           **************************************************************************/
     77          typedef struct
     78          {
     79             u8             cardType;
     80             FDISK_RESULT   status;
     81             FDISK          fdisk;
     82             FAT_DISK       fatFs;
     83          }SD_STATE;
     84          
     85          
     86          /**************************************************************************
     87           *                                  Variables
     88           **************************************************************************/
     89          static SD_STATE sd;
     90          
     91          
     92          /**************************************************************************
     93           *                                  Prototypes
     94           **************************************************************************/
     95          static void SdSpiSetup(u32 clk);
     96          static bool SdSelect(void);
     97          static void SdDeselect(void);
     98          
     99          static bool SdWaitReady(u32 ms);
    100          static u8 SdExchByte(u8 tx);  //lint -esym(534, SdExchByte)
    101          static u8 SdCmd(u8 cmd, u32 arg);
    102          static bool SdReadBlock(u8 *pDest, u16f len);
    103          static bool SdWriteBlock(u8 const *pSrc, u8 token);
    104          
    105          static FDISK_RESULT SdDiskOpen(void);
    106          static FDISK_RESULT SdDiskClose(void);
    107          static FDISK_RESULT SdDiskRead(void *pDestArg, u32 sector, u32 blkCnt);
    108          static FDISK_RESULT SdDiskWrite(void const *pSrcArg, u32 sector, u32 blkCnt);
    109          static FDISK_RESULT SdDiskIoctl(FDISK_IOCTLS ioctl, void *pArgBuf);
    110          
    111          static FDISK_RESULT SdDiskSync(void);
    112          static FDISK_RESULT SdSectorCount(u32 *pCount);
    113          static FDISK_RESULT SdBlockSize(u32 *pSize);
    114          static FDISK_RESULT SdEraseSector(u32 const *pEraseParams);
    115          
    116          
    117          /**************************************************************************
    118           *                                  Global Functions
    119           **************************************************************************/
    120          void SdInit(void)
    121          {
    122             FDISK *pDisk = &sd.fdisk;
    123             pDisk->diskNum = FDISK_SD;
    124             pDisk->pFsData = &sd.fatFs; // Point to the FAT file system
    125          
    126             // Hardware driver for File I/O:
    127             pDisk->pfnOpen  = SdDiskOpen;
    128             pDisk->pfnClose = SdDiskClose;
    129             pDisk->pfnIoctl = SdDiskIoctl;
    130             pDisk->pfnRead  = SdDiskRead;
    131             pDisk->pfnWrite = SdDiskWrite;
    132             FileDiskReg(pDisk);
    133          
    134             if (!FileDiskMount(&sd.fdisk))
    135             {
    136                // error
    137             }
    138             else
    139             {
    140                // File system test?
    141             }
    142          }
    143          
    144          void SdKill(void)
    145          {
    146             FileDiskUnmount(&sd.fdisk); //lint !e534
    147             SdDeselect();
    148          }
    149          
    150          
    151          /**************************************************************************
    152           *                                 Private Functions
    153           **************************************************************************/
    154          static void SdSpiSetup(u32 clk)
    155          {
    156             USART_SETUP usartSetup =
    157             {
    158                .baud = clk,
    159                .lsbFirst = false,
    160                .mode = USART_MODE_SPI,
    161                .parity = USART_PARITY_NONE,     // n/a
    162                .dataBits = 8,                   // n/a
    163                .stopBits = USART_STOP_BITS_1,   // n/a
    164                .spiMode = SPI_MODE0,
    165             };
    166             UsartClose(SD_PERIPH_DEV);
    167             UsartOpen(SD_PERIPH_DEV, &usartSetup);
    168          }
    169          
    170          static bool SdSelect(void)
    171          {
    172             SD_SPI_SEL();
    173             if (SdWaitReady(SD_SPI_WAIT_TIME_MS))
    174             {
    175                return true;
    176             }
    177             SdDeselect();
    178             return false;
    179          }
    180          
    181          static void SdDeselect(void)
    182          {
    183             SD_SPI_DESEL();
    184          }
    185          
    186          static bool SdWaitReady(u32 ms)
    187          {
    188             u8 d;
    189             u32 endTick = TimerMsGet() + ms;
    190             do
    191             {
    192                d = SdExchByte(0xFF);
    193             }
    194             while ((d != 0xFF) && !TimerMsHasElapsed(endTick));
    195             return (d == 0xFF);
    196          }
    197          
    198          static u8 SdExchByte(u8 tx)
    199          {
    200             return (u8)UsartIoctl(SD_PERIPH_DEV, USART_IOCTL_SPI_SINGLE, (s32)tx);
    201          }
    202          
    203          static u8 SdCmd(u8 cmd, u32 arg)
    204          {
    205             u8 retry, resp;
    206          
    207             if (cmd & BIT7) // Send CMD55 prior to ACMD
    208             {
    209                cmd &= 0x7F;
    210                resp = SdCmd(SD_CMD55, 0);
    211                if (resp > 1)
    212                   return resp;
    213             }
    214          
    215             SdDeselect();
    216             if (!SdSelect())
    217                return 0xFF;
    218          
    219             SdExchByte(0x40 | cmd);
    220             SdExchByte((u8)(arg >> 24));       // MSB
    221             SdExchByte((u8)(arg >> 16));
    222             SdExchByte((u8)(arg >> 8));
    223             SdExchByte((u8)arg);               // LSB
    224             SdExchByte((cmd == SD_CMD0) ? 0x95 : (cmd == SD_CMD8) ? 0x87 : 0x01);    // Valid CRC or dummy CRC + stop
    225          
    226             if (cmd == SD_CMD12)
    227                SdExchByte(0xFF);  // Discard one extra byte for command 12
    228          
    229             retry = 10;
    230             do
    231             {
    232                resp = SdExchByte(0xFF);
    233             }
    234             while ((resp & BIT7) && --retry);
    235          
    236             return resp;
    237          }
    238          
    239          static bool SdReadBlock(u8 *pDest, u16f len)
    240          {
    241             u8 token;
    242             u32 endTick = TimerMsGet() + SD_READ_TOKEN_MS;
    243             do
    244             {
    245                token = SdExchByte(0xFF);
    246             } while ((token == 0xFF) && !TimerMsHasElapsed(endTick));
    247          
    248             if (token != 0xFE)
    249             {
    250                return false;
    251             }
    252          
    253             USART_TRANSFER_PARAMS txfr =
    254             {
    255                .pTxData = SdDummy512,
    256                .pRxData = pDest,
    257                .len = len,
    258             };
    259             UsartIoctl(SD_PERIPH_DEV, USART_IOCTL_SPI_WR_RD, (u32)&txfr);
    260             do{} while (UsartIoctl(SD_PERIPH_DEV, USART_IOCTL_STATUS, USART_STATUS_TX_REMAIN) != 0);
    261             SdExchByte(0xFF);
    262             SdExchByte(0xFF);   // Discard CRC
    263             return true;
    264          }
    265          
    266          static bool SdWriteBlock(u8 const *pSrc, u8 token)
    267          {
    268             u8 resp;
    269          
    270             if (!SdWaitReady(SD_SPI_WAIT_TIME_MS))
    271                return false;
    272          
    273             SdExchByte(token);
    274             if (token != 0xFD)
    275             {
    276                UsartWrite(SD_PERIPH_DEV, pSrc, 512);
    277                do{} while (UsartIoctl(SD_PERIPH_DEV, USART_IOCTL_STATUS, USART_STATUS_TX_REMAIN) != 0);
    278                SdExchByte(0xFF);
    279                SdExchByte(0xFF);   // Dummy CRC
    280          
    281                resp = SdExchByte(0xFF);
    282                if ((resp & 0x1F) != 0x05)
    283                   return false;
    284             }
    285             return true;
    286          }
    287          
    288          
    289          
    290          /**************************************************************************
    291           *                                 File System I/O Hooks
    292           **************************************************************************/
    293          static FDISK_RESULT SdDiskOpen(void)
    294          {
    295             u8 n, cmd, ty, ocr[4];
    296             u32 endTick;
    297          
    298             SdSpiSetup(SD_SPI_STARTUP_CLK);
    299             for (n = 10; n; n--)
    300             {
    301                SdExchByte(0xFF);  // Send 80 dummy clocks (10 bytes)
    302             }
    303          
    304             ty = 0;
    305             if (SdCmd(SD_CMD0, 0) == 0x01)      // Put card in SPI/Idle state
    306             {
    307                endTick = TimerMsGet() + SD_INIT_TIMEOUT_MS;
    308                if (SdCmd(SD_CMD8, 0x1AA) == 1) // SDv2?
    309                {
    310                   for (n = 0; n < 4; n++)
    311                   {
    312                      ocr[n] = SdExchByte(0xFF); /* Get 32 bit return value of R7 resp */
    313                   }
    314                   if ((ocr[2] == 0x01) && (ocr[3] == 0xAA))   // Card supports VCC 2.7-3.6V?
    315                   {
    316                      do
    317                      {}
    318                      while (SdCmd(SD_ACMD41, BIT30) && !TimerMsHasElapsed(endTick));
    319                      if ((SdCmd(SD_CMD58, 0) == 0) && !TimerMsHasElapsed(endTick))   // Check CCS bit in OCR
    320                      {
    321                         for (n = 0; n < 4; n++)
    322                         {
    323                            ocr[n] = SdExchByte(0xFF);
    324                         }
    325                         ty = (ocr[0] & BIT6) ? (SD_CT_SD2 | SD_CT_BLOCK) : SD_CT_SD2;   // Card ID SDv2
    326                      }
    327                   }
    328                }
    329                else    // Not SDv2
    330                {
    331                   if (SdCmd(SD_ACMD41, 0) <= 1)
    332                   {
    333                      ty = SD_CT_SD1; // SDv1
    334                      cmd = SD_ACMD41;
    335                   }
    336                   else
    337                   {
    338                      ty = SD_CT_MMC; // MMCv3
    339                      cmd = SD_CMD1;
    340                   }
    341                   do          // Wait for init
    342                   {}
    343                   while (SdCmd(cmd, 0) && !TimerMsHasElapsed(endTick));
    344                   if (TimerMsHasElapsed(endTick) || (SdCmd(SD_CMD16, 512) != 0))  // Set block length to 512
    345                   {
    346                      ty = 0;
    347                   }
    348                }
    349             }
    350             sd.cardType = ty;
    351             SdDeselect();
    352          
    353             if (ty)
    354             {
    355                SdSpiSetup(SD_SPI_OP_CLK);
    356                sd.status = FDISK_OK;
    357             }
    358             else
    359             {
    360                sd.status = FDISK_NOT_READY;
    361             }
    362             return sd.status;
    363          }
    364          
    365          static FDISK_RESULT SdDiskClose(void)
    366          {
    367             return FDISK_OK;
    368          }
    369          
    370          static FDISK_RESULT SdDiskRead(void *pDestArg, u32 sector, u32 blkCnt)
    371          {
    372             u32 rem = blkCnt;
    373             u32 retry;
    374             u8 *pDest;
    375          
    376             if (sd.status != FDISK_OK)
    377                return FDISK_NOT_READY;
    378          
    379             if (!(sd.cardType & SD_CT_BLOCK))   // LBA-to-BA conversion (byte-addressing cards)
    380                sector *= 512;
    381          
    382             for (retry = 2; rem && retry; retry--)
    383             {
    384                pDest = (u8*)pDestArg;
    385                rem = blkCnt;
    386                if (rem == 1)       // Single sector
    387                {
    388                   if ((SdCmd(SD_CMD17, sector) == 0) && SdReadBlock(pDestArg, 512))
    389                   {
    390                      rem = 0;
    391                   }
    392                }
    393                else
    394                {
    395                   if (SdCmd(SD_CMD18, sector) == 0)
    396                   {
    397                      do
    398                      {
    399                         if (!SdReadBlock(pDest, 512))
    400                            break;
    401                         pDest += 512;
    402                      }
    403                      while (--rem);
    404                      SdCmd(SD_CMD12, 0);         //lint !e534 Stop transmission
    405                   }
    406                }
    407                SdDeselect();
    408             }
    409             return (rem == 0) ? FDISK_OK : FDISK_ERROR;
    410          }
    411          
    412          static FDISK_RESULT SdDiskWrite(void const *pSrcArg, u32 sector, u32 blkCnt)
    413          {
    414             u32 rem;
    415             u32 retry;
    416             u8 const *pSrc;
    417          
    418             if (sd.status != FDISK_OK)
    419                return FDISK_NOT_READY;
    420          
    421             rem = blkCnt;
    422             if (!(sd.cardType & SD_CT_BLOCK))       // LBA-to-BA conversion (byte-addressing cards)
    423                sector *= 512;
    424          
    425             for (retry = 2; rem && retry; retry--)
    426             {
    427                pSrc = (u8 const *)pSrcArg;
    428                rem = blkCnt;
    429          
    430                if (rem == 1)
    431                {
    432                   if ((SdCmd(SD_CMD24, sector) == 0) && SdWriteBlock(pSrc, 0xFE))
    433                   {
    434                      rem = 0;
    435                   }
    436                }
    437                else
    438                {
    439                   if (sd.cardType & SD_CT_SDC)
    440                      SdCmd(SD_ACMD23, rem);      //lint !e534
    441          
    442                   if (SdCmd(SD_CMD25, sector) == 0)
    443                   {
    444                      do
    445                      {
    446                         if (!SdWriteBlock(pSrc, 0xFC))
    447                            break;
    448                         pSrc += 512;
    449                      }
    450                      while (--rem);
    451                      if (!SdWriteBlock(NULL, 0xFD))
    452                         rem = 1;    // force a retry
    453                   }
    454                }
    455                SdDeselect();
    456             }
    457             return (rem == 0) ? FDISK_OK : FDISK_ERROR;
    458          }
    459          
    460          static FDISK_RESULT SdDiskIoctl(FDISK_IOCTLS ioctl, void *pArgBuf)
    461          {
    462             FDISK_RESULT result = FDISK_OK;
    463             switch (ioctl)
    464             {
    465             case FDISK_SYNC:              result = SdDiskSync();           break;
    466             case FDISK_GET_SECTOR_SIZE:   *(u32*)pArgBuf = 512;            break;
    467             case FDISK_GET_SECTOR_COUNT:  result = SdSectorCount(pArgBuf); break;
    468             case FDISK_GET_BLOCK_SIZE:    result = SdBlockSize(pArgBuf);   break;
    469             case FDISK_ERASE_SECTOR:      result = SdEraseSector(pArgBuf); break;
    470             case FDISK_STATUS:            result = sd.status;              break;
    471             default:                      result = FDISK_ARG_ERROR;        break;
    472             }
    473             SdDeselect();
    474             return result;
    475          }
    476          
    477          static FDISK_RESULT SdDiskSync(void)
    478          {
    479             FDISK_RESULT result = SdSelect() ? FDISK_OK : FDISK_ERROR;
    480             return result;
    481          }
    482          
    483          static FDISK_RESULT SdSectorCount(u32 *pCount)
    484          {
    485             FDISK_RESULT result;
    486             u8 csd[16];
    487          
    488             if ((SdCmd(SD_CMD9, 0) == 0) && SdReadBlock(csd, 16))
    489             {
    490                if ((csd[0] >> 6) == 1)     // SDC v2.00
    491                {
    492                   *pCount = ((u32)csd[9] + ((u32)csd[8] << 8) + 1) << 10;
    493                }
    494                else                                // SDC v1.XX or SD v3
    495                {
    496                   u8 n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    497                   *pCount = ((csd[8] >> 6) + ((u32)csd[7] << 2) + ((u32)(csd[6] & 3) << 10) + 1) << (n - 9);
    498                }
    499                result = FDISK_OK;
    500             }
    501             else
    502             {
    503                result = FDISK_ERROR;
    504             }
    505             return result;
    506          }
    507          
    508          static FDISK_RESULT SdBlockSize(u32 *pSize)
    509          {
    510             FDISK_RESULT result = FDISK_ERROR;
    511             u8 csd[16];
    512             u8f n;
    513          
    514             if (sd.cardType & SD_CT_SD2)        // SDC v2.0
    515             {
    516                if (SdCmd(SD_ACMD13, 0) == 0)
    517                {
    518                   SdExchByte(0xFF);
    519                   if (SdReadBlock(csd, 16))
    520                   {
    521                      for (n = 64 - 16; n; n--)
    522                         SdExchByte(0xFF);  // Purge trailing data
    523          
    524                      *pSize = 16UL << (csd[10] >> 4);
    525                      result = FDISK_OK;
    526                   }
    527                }
    528             }
    529             else                                            // SDC v1.xx or SD
    530             {
    531                if ((SdCmd(SD_CMD9, 0) == 0) && SdReadBlock(csd, 16))
    532                {
    533                   if (sd.cardType & SD_CT_SD1)
    534                   {
    535                      *pSize = (((csd[10] & 63) << 1) + ((u32)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    536                   }
    537                   else
    538                   {
    539                      *pSize = ((u32)((csd[10] & 124) >> 2) + 1) *
    540                         (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    541                   }
    542                   result = FDISK_OK;
    543                }
    544             }
    545             return result;
    546          }
    547          
    548          static FDISK_RESULT SdEraseSector(u32 const *pEraseParams)
    549          {
    550             FDISK_RESULT result = FDISK_ERROR;
    551             u8 csd[16];
    552             u32 start, end;
    553          
    554             if (sd.cardType & SD_CT_SDC)
    555             {
    556                if ((SdCmd(SD_CMD9, 0) == 0) && SdReadBlock(csd, 16))
    557                {
    558                   if ((csd[0] >> 6) || (csd[10] & 0x40))      // Check if sector erase can be applied to the card
    559                   {
    560                      start = pEraseParams[0];
    561                      end = pEraseParams[1];
    562                      if (!(sd.cardType & SD_CT_BLOCK))
    563                      {
    564                         start *= 512;
    565                         end *= 512;
    566                      }
    567                      if ((SdCmd(SD_CMD32, start) == 0) &&
    568                          (SdCmd(SD_CMD33, end) == 0) &&
    569                          (SdCmd(SD_CMD38, 0) == 0) &&
    570                          (SdWaitReady(SD_ERASE_TIMEOUT_MS)))
    571                      {
    572                         result = FDISK_OK;
    573                      }
    574                   }
    575                }
    576             }
    577             return result;
    578          }
    579          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   SdBlockSize
        32   -> SdCmd
        32   -> SdExchByte
        32   -> SdReadBlock
      24   SdCmd
        24   -> SdCmd
        24   -> SdDeselect
        24   -> SdExchByte
        24   -> SdSelect
       8   SdDeselect
         8   -> GpioSet
       0   SdDiskClose
      16   SdDiskIoctl
        16   -> SdBlockSize
        16   -> SdDeselect
        16   -> SdDiskSync
        16   -> SdEraseSector
        16   -> SdSectorCount
      24   SdDiskOpen
        24   -> SdCmd
        24   -> SdDeselect
        24   -> SdExchByte
        24   -> SdSpiSetup
        24   -> TimerMsGet
        24   -> TimerMsHasElapsed
      32   SdDiskRead
        32   -> SdCmd
        32   -> SdDeselect
        32   -> SdReadBlock
       8   SdDiskSync
         8   -> SdSelect
      32   SdDiskWrite
        32   -> SdCmd
        32   -> SdDeselect
        32   -> SdWriteBlock
      40   SdEraseSector
        40   -> SdCmd
        40   -> SdReadBlock
        40   -> SdWaitReady
       8   SdExchByte
         8   -> UsartIoctl
       8   SdInit
         8   -> FileDiskMount
         8   -> FileDiskReg
       8   SdKill
         8   -> FileDiskUnmount
         8   -> SdDeselect
      32   SdReadBlock
        32   -> SdExchByte
        32   -> TimerMsGet
        32   -> TimerMsHasElapsed
        32   -> UsartIoctl
      32   SdSectorCount
        32   -> SdCmd
        32   -> SdReadBlock
       8   SdSelect
         8   -> GpioClear
         8   -> SdDeselect
         8   -> SdWaitReady
      24   SdSpiSetup
        24   -> UsartClose
        24   -> UsartOpen
      16   SdWaitReady
        16   -> SdExchByte
        16   -> TimerMsGet
        16   -> TimerMsHasElapsed
      16   SdWriteBlock
        16   -> SdExchByte
        16   -> SdWaitReady
        16   -> UsartIoctl
        16   -> UsartWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {(void const *)(&SdDummy512), (void
      12  ?<Constant {0, 0, 1, 4, 8, 0, 0}>
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
     202  SdBlockSize
     166  SdCmd
      10  SdDeselect
       4  SdDiskClose
     100  SdDiskIoctl
     332  SdDiskOpen
     166  SdDiskRead
      18  SdDiskSync
     184  SdDiskWrite
     512  SdDummy512
     152  SdEraseSector
      20  SdExchByte
      76  SdInit
      16  SdKill
     110  SdReadBlock
     154  SdSectorCount
      32  SdSelect
      36  SdSpiSetup
      50  SdWaitReady
     100  SdWriteBlock
    3372  sd

 
 3 372 bytes in section .bss
   536 bytes in section .rodata
 1 952 bytes in section .text
 
 1 952 bytes of CODE  memory
   536 bytes of CONST memory
 3 372 bytes of DATA  memory

Errors: none
Warnings: none
