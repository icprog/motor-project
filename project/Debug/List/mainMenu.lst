###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.2.5449/W32 for ARM      22/Mar/2014  16:20:47 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Quinn\Documents\School\MPG\End                  #
#                    Project\src\app\mainMenu.c                               #
#    Command line =  "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\src\app\mainMenu.c" -D __SAM3U2C__               #
#                    --preprocess=c "C:\Users\Quinn\Documents\School\MPG\End  #
#                    Project\project\Debug\List\" -lcN                        #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\Debug\List\" --diag_suppress Pa050 -o    #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\Debug\Obj\" --no_cse --no_unroll         #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\Quinn\Documents\School\MPG\End       #
#                    Project\project\..\src\" -I                              #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\bsp\" -I                          #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\app\" -I                          #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\lib\utils\" -I                    #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\lib\structures\src\" -I           #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\lib\file\" -I                     #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\lib\file\hooks\FatFs\" -I         #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\lib\file\disk\" -I                #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\lib\version\" -I                  #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\lib\FatFs\" -I                    #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\bsp\" -I                          #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\config\" -I                       #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\drivers\" -I                      #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\utils\" -I                        #
#                    "C:\Users\Quinn\Documents\School\MPG\End                 #
#                    Project\project\..\src\drivers\" -On -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\Quinn\Documents\School\MPG\End                  #
#                    Project\project\Debug\List\mainMenu.lst                  #
#    Object file  =  C:\Users\Quinn\Documents\School\MPG\End                  #
#                    Project\project\Debug\Obj\mainMenu.o                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Quinn\Documents\School\MPG\End Project\src\app\mainMenu.c
      1          /*******************************************************************************************
      2          This is free, public domain software and there is NO WARRANTY.
      3          No restriction on use. You can use, modify and redistribute it for
      4          personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
      5          
      6          Quinn Miller
      7          ********************************************************************************************/
      8          
      9          
     10          #include "mainMenu.h"
     11          
     12          
     13          /**************************************************************************
     14           *                                  Constants
     15           **************************************************************************/
     16          static const char menuLinks2[6][20] = {"Led Show\n", "Music Player\n", "Option 3\n",
     17            "Option 4\n", "Option 5\n", "Option 6\n"};
     18          
     19          /**************************************************************************
     20           *                                  Types
     21           **************************************************************************/
     22          /**************************************************************************
     23           *                                  Variables
     24           **************************************************************************/
     25          static u8 currLink = 0;         // Link for selector
     26          static u8 topLink = 0;          // Link on top row of LCD
     27          static u8 botLink = 1;          // Link on bottom row of LCD
     28          static u8 lastScroll = 0;       // Last scroll direction (0 down, 1 up)
     29          
     30          static u8 currMenu = 255;       // Current menu
     31           
     32          /**************************************************************************
     33           *                                  Prototypes
     34           **************************************************************************/
     35          static void scrollDown(u8* linkA, u8* linkB, u8* lastScroll);
     36          static void scrollUp(u8* linkA, u8* linkB, u8* lastScroll);
     37          static void forwardMenu(u8 linkA, u8 currLink);
     38          static void backMenu();
     39          
     40          /**************************************************************************
     41           *                                  Global Functions
     42           **************************************************************************/
     43          void MainMenuInit()
     44          {
     45            //LedSequence(100);
     46            //LedRgbCycleSet(5000, UINT8_MAX, UINT8_MAX);
     47          }
     48          
     49          void MainMenuUpdate()
     50          {  
     51            // Check for button presses
     52            if (ButtonWasPressed(BTN_RM))         // Scroll Down
     53            {
     54              ButtonPressAck(BTN_RM);
     55              scrollDown(&topLink, &botLink, &lastScroll);
     56            }
     57            
     58            if (ButtonWasPressed(BTN_LM))         // Scroll Up
     59            {
     60              ButtonPressAck(BTN_LM);
     61              scrollUp(&topLink, &botLink, &lastScroll);
     62            }
     63            
     64            if (ButtonWasPressed(BTN_R))
     65            {
     66              ButtonPressAck(BTN_R);
     67              forwardMenu(topLink, currLink);
     68            }
     69              
     70            // Screen update
     71            LcdClear();
     72            
     73            if(currLink == 0)
     74            {
     75              LcdPutc('*');
     76              LcdPuts(menuLinks2[topLink]);
     77              LcdPuts(menuLinks2[botLink]);
     78            }
     79            else
     80            {
     81              LcdPuts(menuLinks2[topLink]);
     82              LcdPutc('*');
     83              LcdPuts(menuLinks2[botLink]);
     84            }
     85          }
     86          
     87          /**************************************************************************
     88           *                                 Private Functions
     89           **************************************************************************/
     90          static void scrollDown(u8* linkA, u8* linkB, u8* lastScroll)
     91          {
     92            u8 temp = *linkB;
     93            
     94            // Adjusting pointer
     95            if (currLink == 1)
     96              currLink = 0;
     97            
     98            if (*linkB == 5)
     99              currLink = 1;
    100            
    101            // Translating links
    102            if (*linkB < 5)
    103            {
    104              *linkB = temp + 1;
    105              *linkA = temp;
    106              *lastScroll = 0;
    107            }
    108          }
    109          
    110          static void scrollUp(u8* linkA, u8* linkB,u8* lastScroll)
    111          {
    112            u8 temp = *linkA;
    113            
    114            // Adjusting pointer
    115            if (currLink == 0)
    116              currLink = 1;
    117            
    118            if (*linkA == 0)
    119              currLink = 0;
    120            
    121            // Translating links
    122            if (*linkA > 0)
    123            {
    124              *linkA = temp - 1;
    125              *linkB = temp;
    126              *lastScroll = 1;
    127            }
    128          }
    129          
    130          static void forwardMenu(u8 linkA, u8 currLink)
    131          {
    132            u8 nextMenu = linkA + currLink;
    133            
    134            switch (nextMenu)
    135            {
    136            case 0:
    137              LedShowInit();
    138              
    139            case 1:
    140              MusicPlayerInit();
    141              MusicPlayerUpdate();
    142            default:
    143              break;
    144            }
    145          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   MainMenuInit
       8   MainMenuUpdate
         8   -> ButtonPressAck
         8   -> ButtonWasPressed
         8   -> LcdClear
         8   -> LcdPutc
         8   -> LcdPuts
         8   -> forwardMenu
         8   -> scrollDown
         8   -> scrollUp
      16   forwardMenu
        16   -> LedShowInit
        16   -> MusicPlayerInit
        16   -> MusicPlayerUpdate
       8   scrollDown
       8   scrollUp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       2  MainMenuInit
     174  MainMenuUpdate
       1  botLink
       1  currLink
      34  forwardMenu
       1  lastScroll
     120  menuLinks2
      50  scrollDown
      50  scrollUp
       1  topLink

 
   3 bytes in section .bss
   1 byte  in section .data
 120 bytes in section .rodata
 330 bytes in section .text
 
 330 bytes of CODE  memory
 120 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 2
