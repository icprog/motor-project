###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.2.5449/W32 for ARM      17/Mar/2014  18:12:36 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Quinn\Documents\School\MPG\SVN                  #
#                    Server\src\drivers\led.c                                 #
#    Command line =  "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\src\drivers\led.c" -D __SAM3U2C__ --preprocess=c  #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\Debug\List\" -lcN                         #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\Debug\List\" --diag_suppress Pa050 -o     #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\Debug\Obj\" --no_cse --no_unroll          #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\Quinn\Documents\School\MPG\SVN       #
#                    Server\project\..\src\" -I "C:\Users\Quinn\Documents\Sch #
#                    ool\MPG\SVN Server\project\..\src\bsp\" -I               #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\app\" -I                           #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\utils\" -I                     #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\structures\src\" -I            #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\file\" -I                      #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\file\hooks\FatFs\" -I          #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\file\disk\" -I                 #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\version\" -I                   #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\lib\FatFs\" -I                     #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\bsp\" -I                           #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\config\" -I                        #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\drivers\" -I                       #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\utils\" -I                         #
#                    "C:\Users\Quinn\Documents\School\MPG\SVN                 #
#                    Server\project\..\src\drivers\" -On -I "C:\Program       #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\Quinn\Documents\School\MPG\SVN                  #
#                    Server\project\Debug\List\led.lst                        #
#    Object file  =  C:\Users\Quinn\Documents\School\MPG\SVN                  #
#                    Server\project\Debug\Obj\led.o                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Quinn\Documents\School\MPG\SVN Server\src\drivers\led.c
      1          /*******************************************************************************************
      2          LED driver with manual PWM control
      3          
      4          This is free, public domain software and there is NO WARRANTY.
      5          No restriction on use. You can use, modify and redistribute it for
      6          personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
      7          
      8          Sheldon Patterson
      9          ********************************************************************************************/
     10          
     11          #include "led.h"
     12          #include "gpio.h"
     13          
     14          
     15          /**************************************************************************
     16           *                                  Constants
     17           **************************************************************************/
     18          #define LED_IS_VALID(led)		((u8)led < (u8)LED_COUNT)
     19          #define LED_ASSERT_VALID(led)	{if (!LED_IS_VALID(led))	return;}
     20          
     21          static const GPIO_PIN ledPins[LED_COUNT] =
     22          {
     23          	[LED_RGB_RED] = GPIO_PIN_LCD_BL_RED,
     24          	[LED_RGB_GREEN] = GPIO_PIN_LCD_BL_GREEN,
     25          	[LED_RGB_BLUE] = GPIO_PIN_LCD_BL_BLUE,
     26          	[LED_PURPLE] = GPIO_PIN_LED_PURPLE,
     27          	[LED_WHITE] = GPIO_PIN_LED_WHITE,
     28          	[LED_BLUE] = GPIO_PIN_LED_BLUE,
     29          	[LED_RED] = GPIO_PIN_LED_RED,
     30          	[LED_GREEN] = GPIO_PIN_LED_GREEN,
     31          	[LED_ORANGE] = GPIO_PIN_LED_ORANGE,
     32          	[LED_YELLOW] = GPIO_PIN_LED_YELLOW,
     33          	[LED_CYAN] = GPIO_PIN_LED_CYAN,
     34          };
     35          
     36          #if LED_COLOR_MODE == LED_COLOR_MODE_SINE
     37          static const u8 ledSinTable[128] =
     38          {
     39          	0,1,2,2,3,4,5,5,6,7,8,9,9,10,11,12,12,13,14,14,15,16,16,17,
     40          	18,18,19,20,20,21,21,22,23,23,24,24,25,25,26,26,27,27,27,28,
     41          	28,29,29,29,30,30,30,30,31,31,31,31,31,32,32,32,32,32,32,32,
     42          	32,32,32,32,32,32,32,32,31,31,31,31,31,30,30,30,30,29,29,29,
     43          	28,28,27,27,27,26,26,25,25,24,24,23,23,22,21,21,20,20,19,18,
     44          	18,17,16,16,15,14,14,13,12,12,11,10,9,9,8,7,6,5,5,4,3,2,2,1
     45          };
     46          #endif
     47          
     48          
     49          /**************************************************************************
     50           *                                  Types
     51           **************************************************************************/
     52          typedef struct
     53          {
     54          	u8 duty;
     55          	u8 cycleCount;
     56          	u16 blinkTickCount;
     57          	u16 blinkOnTicks;
     58          	u16 blinkOffTicks;
     59          }LED_STATE;
     60          
     61          typedef struct
     62          {
     63          	u16 cycleCountTicks;	// counts number of times RGB update has been called
     64          	u16 cycleRateTicks;	// user-specified cycle rate
     65          	u8 stepSize;		   // controls how fast to sweep the RGB values
     66          	u8 saturation;		   // 0 = no color, 255 = full color
     67          	u8 brightness;		   // 255 = max brightness
     68          	u16 state;			   // Which state of the algorithm we're at
     69          }LED_RGB_STATE;
     70          
     71          
     72          /**************************************************************************
     73           *                                  Variables
     74           **************************************************************************/
     75          static LED_STATE ledState[LED_COUNT];
     76          static LED_RGB_STATE ledRgbState;
     77          
     78          /**************************************************************************
     79           *                                  Prototypes
     80           **************************************************************************/
     81          static void LedRgbUpdate(void);
     82          static void LedIoSetState(LEDS led, bool isOn);
     83          
     84          
     85          /**************************************************************************
     86           *                                  Global Functions
     87           **************************************************************************/
     88          void LedOn(LEDS led)
     89          {
     90          	LED_ASSERT_VALID(led);
     91          	ledState[led].duty = 100;
     92          	ledState[led].blinkOnTicks = 0;
     93          }
     94          
     95          void LedOff(LEDS led)
     96          {
     97          	LED_ASSERT_VALID(led);
     98          	ledState[led].duty = 0;
     99          	ledState[led].blinkOnTicks = 0;
    100          }
    101          
    102          void LedSet(LEDS led, bool isOn)
    103          {
    104          	if (isOn)
    105          	{
    106          		LedOn(led);
    107          	}
    108          	else
    109          	{
    110          		LedOff(led);
    111          	}
    112          }
    113          
    114          void LedSetPwm(LEDS led, u8 dutyPercent)
    115          {
    116          	ledState[led].duty = dutyPercent;
    117          	ledState[led].cycleCount = 0;
    118          
    119          	if (IN_RANGE((u8f)led, LED_RGB_RED, LED_RGB_BLUE))
    120          	{
    121          		ledRgbState.cycleRateTicks = 0;
    122          	}
    123          }
    124          
    125          void LedBlink(LEDS led, u16 onMs, u16 offMs)
    126          {
    127             ledState[led].duty = 100;
    128             ledState[led].blinkOnTicks = onMs / LED_UPDATE_RATE_MS;
    129             ledState[led].blinkOffTicks = offMs / LED_UPDATE_RATE_MS;
    130             ledState[led].blinkTickCount = 0;
    131          }
    132          
    133          void LedBlinkPwm(LEDS led, u16 onMs, u16 offMs, u8 dutyPercent)
    134          {
    135          	LedBlink(led, onMs, offMs);
    136          	LedSetPwm(led, dutyPercent);
    137          }
    138          
    139          void LedSequence(u16 cycleRateMs)
    140          {
    141             u16 cycleRateTicks = (cycleRateMs / LED_UPDATE_RATE_MS);
    142             cycleRateMs *= (u16)LED_RED;  // number of LEDs
    143             for (LEDS led = (LEDS)0; led <= LED_RED; led++)
    144             {
    145                LedBlink(led, cycleRateMs, cycleRateMs);
    146                ledState[led].blinkTickCount = (led == (LEDS)0)
    147                   ? 0
    148                   : (u16)(cycleRateTicks * (u16)((u16)LED_RED + ((u16)LED_RED - (u16)led)));
    149             }
    150          }
    151          
    152          
    153          // RGB functions:
    154          void LedRgbSet(COLOR rgb)
    155          {
    156          	LedSetPwm(LED_RGB_RED,	(u8)((u32)rgb >> 16));	// bits 23-16
    157          	LedSetPwm(LED_RGB_GREEN,(u8)((u32)rgb >>  8));	// bits 15-8
    158          	LedSetPwm(LED_RGB_BLUE, (u8)((u32)rgb      ));	// bits  7-0
    159          }
    160          
    161          void LedRgbCycleSet(u32 cycleTimeMs, u8 saturation, u8 brightness)
    162          {
    163             u32 cycleTimeTicks = cycleTimeMs / LED_UPDATE_RATE_MS;
    164          	if (saturation == 0)
    165          	{
    166          		LedRgbSet(COLOR_Black);
    167          	}
    168          	else if (cycleTimeTicks > 0)
    169          	{
    170          		u32 numSteps;
    171          #if LED_COLOR_MODE == LED_COLOR_MODE_RGB
    172          		numSteps = (u32)((brightness - (UINT8_MAX - saturation)) + 1) * 6;	// (6 = up + down for each RGB)
    173          #elif LED_COLOR_MODE == LED_COLOR_MODE_HSB
    174          		numSteps = 360;		// 360 degrees in a circle
    175          #elif LED_COLOR_MODE == LED_COLOR_MODE_SINE
    176          		numSteps = sizeof(ledSinTable);
    177          		// saturation isn't used
    178          		// SINE wave is scaled from 0-32, so we can multiply that by 8
    179          		brightness = (u8)(((u32)brightness * 8uL) / 256);
    180          #endif
    181          		if (cycleTimeTicks >= numSteps)
    182          		{
    183          			// small steps at some slow rate
    184          			ledRgbState.cycleRateTicks = (u16)(cycleTimeTicks / numSteps);
    185          			ledRgbState.stepSize = 1;
    186          		}
    187          		else
    188          		{
    189          			// bigger steps at faster rate
    190          			ledRgbState.cycleRateTicks = 1;
    191          			ledRgbState.stepSize = (u8)(numSteps / cycleTimeTicks);
    192          		}
    193          		ledRgbState.cycleCountTicks = 0;
    194          		ledRgbState.saturation = saturation;
    195          		ledRgbState.brightness = brightness;
    196          		ledRgbState.state = 0;
    197          	}
    198          	else
    199          	{
    200          		ledRgbState.cycleRateTicks = 0;
    201          	}
    202          }
    203          
    204          
    205          // Application level init and update functions
    206          void LedInit(void)
    207          {
    208          	memset(ledState, 0, sizeof(ledState));
    209          	memset(&ledRgbState, 0, sizeof(ledRgbState));
    210          	for (LEDS led = (LEDS)0; led < LED_COUNT; led++)
    211             {
    212                LedIoSetState(led, false);
    213             }
    214          }
    215          
    216          void LedUpdate(void)
    217          {
    218          	if ((ledRgbState.cycleRateTicks > 0) &&
    219          		 (++ledRgbState.cycleCountTicks > ledRgbState.cycleRateTicks))
    220          	{
    221          			ledRgbState.cycleCountTicks = 0;
    222          			LedRgbUpdate();
    223          	}
    224          
    225          	for (LEDS led = (LEDS)0; led < LED_COUNT; led++)
    226          	{
    227          		LED_STATE *pLed = &ledState[led];
    228          
    229          		// blinking control first:
    230          		if (pLed->blinkTickCount++ > pLed->blinkOnTicks)
    231          		{
    232          			// off-cycle of blinking
    233          			if (pLed->blinkTickCount > (pLed->blinkOnTicks + pLed->blinkOffTicks))
    234          			{
    235          				pLed->blinkTickCount = 0;
    236          			}
    237          			LedIoSetState(led, false);
    238          		}
    239          		else
    240          		{
    241          			// on-cycle of blinking
    242          			if (pLed->blinkOnTicks == 0)
    243          			{
    244          				pLed->blinkTickCount = 0;
    245          			}
    246          
    247          			// PWM control during on-cycle of blinking:
    248          			pLed->cycleCount += LED_DUTY_RESOLUTION;
    249          			if (pLed->cycleCount >= (101 - LED_DUTY_RESOLUTION))
    250          			{
    251          				pLed->cycleCount = 0;
    252          			}
    253          			LedIoSetState(led, (bool)(pLed->duty > pLed->cycleCount));
    254          		}
    255          	}
    256          }
    257          
    258          
    259          
    260          /**************************************************************************
    261           *                                 Private Functions
    262           **************************************************************************/
    263          static void LedRgbUpdate(void)
    264          {
    265          #if LED_COLOR_MODE == LED_COLOR_MODE_RGB
    266          	u8 stepsRemaining = ledRgbState.stepSize;
    267          
    268          	// RGB sequence: R down, G up, B down, R up, G down, B up
    269          	// --> Can be reduced to RGB,RGB (alternating down/up)
    270          	do
    271          	{
    272          		// NOTE: This works because the enum has RGB defined first (in that order)
    273          		LEDS led = (LEDS)ledRgbState.state;
    274          		if ((u8f)led > (u8f)LED_RGB_BLUE)
    275          			led = (LEDS)((u8f)led - 3);
    276          
    277          		// alternate between decrementing and incrementing values
    278          		if (ledRgbState.state & BIT0)
    279          		{
    280          			u16 newDuty = (u16)ledState[led].duty + (u16)stepsRemaining;
    281          			if (newDuty >= (u16)ledRgbState.brightness)
    282          			{
    283          				// max'd out. Continue with the next LED...
    284          				stepsRemaining = (u8)(newDuty - (u16)ledRgbState.brightness);
    285          				ledState[led].duty = ledRgbState.brightness;
    286          				ledRgbState.state++;
    287          				if (ledRgbState.state >= 6)
    288          				{
    289          					ledRgbState.state = 0;
    290          				}
    291          			}
    292          			else
    293          			{
    294          				stepsRemaining = 0;
    295          				ledState[led].duty = (u8)newDuty;
    296          			}
    297          		}
    298          		else
    299          		{
    300          			u8 newDuty = ledState[led].duty >= stepsRemaining?
    301          				(u8)(ledState[led].duty - stepsRemaining) : 0;
    302          			u8 minBrightness = (u8)(UINT8_MAX - ledRgbState.saturation);
    303          			if (newDuty <= minBrightness)
    304          			{
    305          				// min'd out. Continue with the next LED...
    306          				stepsRemaining = (u8)(minBrightness - newDuty);
    307          				ledState[led].duty = minBrightness;
    308          				ledRgbState.state++;
    309          			}
    310          			else
    311          			{
    312          				stepsRemaining = 0;
    313          				ledState[led].duty = (u8)newDuty;
    314          			}
    315          		}
    316          
    317          	} while ((stepsRemaining > 0) && (stepsRemaining < ledRgbState.stepSize));
    318          
    319          #elif LED_COLOR_MODE == LED_COLOR_MODE_HSB
    320          	u32 r,g,b;
    321          	u32 val = (u32)ledRgbState.brightness;
    322          	u32 base = (u32)(((255uL - (u32)ledRgbState.saturation) * val) >> 8);
    323          	u32 hue;
    324          	ledRgbState.state += ledRgbState.stepSize;
    325          	if (ledRgbState.state >= 360)
    326          		ledRgbState.state = 0;
    327          	hue = ledRgbState.state;
    328          
    329          	switch(hue / 60)
    330          	{
    331          	default:
    332          	case 0:
    333          		r = val;
    334          		g = (((val - base) * hue) / 60) + base;
    335          		b = base;
    336          		break;
    337          	case 1:
    338          		r = (((val - base) * (60 - (hue % 60))) / 60) + base;
    339          		g = val;
    340          		b = base;
    341          		break;
    342          	case 2:
    343          		r = base;
    344          		g = val;
    345          		b = (((val - base) * (hue % 60)) / 60) + base;
    346          		break;
    347          	case 3:
    348          		r = base;
    349          		g = (((val - base) * (60 - (hue % 60))) / 60) + base;
    350          		b = val;
    351          		break;
    352          	case 4:
    353          		r = (((val - base) * (hue % 60)) / 60) + base;
    354          		g = base;
    355          		b = val;
    356          		break;
    357          	case 5:
    358          		r = val;
    359          		g = base;
    360          		b = (((val - base) *(60 - (hue % 60))) / 60) + base;
    361          		break;
    362          	}
    363          	ledState[LED_RGB_RED].duty = (u8)r;
    364          	ledState[LED_RGB_GREEN].duty = (u8)g;
    365          	ledState[LED_RGB_BLUE].duty = (u8)b;
    366          
    367          #elif LED_COLOR_MODE == LED_COLOR_MODE_SINE
    368          	u8 brightness = ledRgbState.brightness;
    369          	ledRgbState.state += ledRgbState.stepSize;
    370          	// Note: each LED is 120 degress out of phase.
    371          	ledState[LED_RGB_RED].duty = (u8)(ledSinTable[ledRgbState.state & 0x7F] * brightness);
    372          	ledState[LED_RGB_GREEN].duty = (u8)(ledSinTable[(ledRgbState.state+0x55) & 0x7F] * brightness);
    373          	ledState[LED_RGB_BLUE].duty = (u8)(ledSinTable[(ledRgbState.state+0xAA) & 0x7F] * brightness);
    374          #endif
    375          }
    376          
    377          
    378          static void LedIoSetState(LEDS led, bool isOn)
    379          {
    380             // NOTE: all LEDs are active high
    381             GpioSetState(ledPins[led], isOn);
    382          }
    383          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   LedBlink
      24   LedBlinkPwm
        24   -> LedBlink
        24   -> LedSetPwm
       8   LedInit
         8   -> LedIoSetState
         8   -> memset
      16   LedIoSetState
        16   -> GpioSetState
       0   LedOff
       0   LedOn
      24   LedRgbCycleSet
        24   -> LedRgbSet
       8   LedRgbSet
         8   -> LedSetPwm
       0   LedRgbUpdate
      16   LedSequence
        16   -> LedBlink
      16   LedSet
        16   -> LedOff
        16   -> LedOn
       0   LedSetPwm
      16   LedUpdate
        16   -> LedIoSetState
        16   -> LedRgbUpdate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
      64  LedBlink
      40  LedBlinkPwm
      46  LedInit
      22  LedIoSetState
      30  LedOff
      30  LedOn
     106  LedRgbCycleSet
      36  LedRgbSet
      84  LedRgbUpdate
      76  LedSequence
      32  LedSet
      40  LedSetPwm
     154  LedUpdate
      12  ledPins
      12  ledRgbState
     128  ledSinTable
      88  ledState

 
 100 bytes in section .bss
 140 bytes in section .rodata
 776 bytes in section .text
 
 776 bytes of CODE  memory
 140 bytes of CONST memory
 100 bytes of DATA  memory

Errors: none
Warnings: none
